name: Publish to Maven Central

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Verify Java version
      run: |
        echo "‚òï Java version:"
        java -version
        echo "üìã JAVA_HOME: $JAVA_HOME"
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Verify Gradle wrapper
      run: |
        echo "üîß Gradle wrapper info:"
        ./gradlew --version
        echo "üìÅ Gradle wrapper files:"
        ls -la gradle/wrapper/
        
    - name: Validate required secrets
      run: |
        echo "üîç Validating required secrets..."
        
        # Check SIGNING_KEY
        if [ -z "${{ secrets.SIGNING_KEY }}" ]; then
          echo "‚ùå ERROR: SIGNING_KEY secret is missing or empty"
          echo "   Please add the SIGNING_KEY secret to your repository settings"
          echo "   This should be your GPG private key in base64 format"
          exit 1
        else
          echo "‚úÖ SIGNING_KEY secret is present"
        fi
        
        # Check SIGNING_PASSWORD
        if [ -z "${{ secrets.SIGNING_PASSWORD }}" ]; then
          echo "‚ùå ERROR: SIGNING_PASSWORD secret is missing or empty"
          echo "   Please add the SIGNING_PASSWORD secret to your repository settings"
          echo "   This should be the password for your GPG private key"
          exit 1
        else
          echo "‚úÖ SIGNING_PASSWORD secret is present"
        fi
        
        # Check OSSRH_USERNAME
        if [ -z "${{ secrets.OSSRH_USERNAME }}" ]; then
          echo "‚ùå ERROR: OSSRH_USERNAME secret is missing or empty"
          echo "   Please add the OSSRH_USERNAME secret to your repository settings"
          echo "   This should be your Sonatype/OSSRH username"
          exit 1
        else
          echo "‚úÖ OSSRH_USERNAME secret is present"
        fi
        
        # Check OSSRH_PASSWORD
        if [ -z "${{ secrets.OSSRH_PASSWORD }}" ]; then
          echo "‚ùå ERROR: OSSRH_PASSWORD secret is missing or empty"
          echo "   Please add the OSSRH_PASSWORD secret to your repository settings"
          echo "   This should be your Sonatype/OSSRH password or token"
          exit 1
        else
          echo "‚úÖ OSSRH_PASSWORD secret is present"
        fi
        
        # Validate SIGNING_KEY format (check if it's base64 or raw GPG key)
        if echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > /dev/null 2>&1; then
          echo "‚úÖ SIGNING_KEY is base64 encoded"
        elif echo "${{ secrets.SIGNING_KEY }}" | grep -q "BEGIN PGP PRIVATE KEY BLOCK"; then
          echo "‚úÖ SIGNING_KEY is raw GPG key format"
        else
          echo "‚ùå ERROR: SIGNING_KEY format is invalid"
          echo "   The key should be either:"
          echo "   1. Base64 encoded GPG key"
          echo "   2. Raw GPG key starting with '-----BEGIN PGP PRIVATE KEY BLOCK-----'"
          echo "   For base64: gpg --armor --export-secret-keys <key-id> | base64 -w 0"
          echo "   For raw: gpg --armor --export-secret-keys <key-id>"
          exit 1
        fi
        
        echo "üéâ All secrets validation passed!"
        echo "üìã Secrets summary:"
        echo "  - SIGNING_KEY: ${#SIGNING_KEY} characters"
        echo "  - SIGNING_PASSWORD: ${#SIGNING_PASSWORD} characters"
        echo "  - OSSRH_USERNAME: ${#OSSRH_USERNAME} characters"
        echo "  - OSSRH_PASSWORD: ${#OSSRH_PASSWORD} characters"
        
    - name: Validate GPG signing credentials
      run: |
        echo "üîê Validating GPG signing credentials..."
        
        # Check if key is base64 encoded or raw GPG key
        if echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > /dev/null 2>&1; then
          echo "üîì Decoding base64 encoded GPG key..."
          SIGNING_KEY_CONTENT=$(echo "${{ secrets.SIGNING_KEY }}" | base64 --decode)
        else
          echo "üìù Using raw GPG key format..."
          SIGNING_KEY_CONTENT="${{ secrets.SIGNING_KEY }}"
        fi
        
        # Import GPG key to verify it's valid
        echo "$SIGNING_KEY_CONTENT" | gpg --batch --import 2>&1 | tee /tmp/gpg_import.log
        
        if [ ${PIPESTATUS[1]} -ne 0 ]; then
          echo "‚ùå ERROR: Failed to import GPG signing key"
          echo "   The SIGNING_KEY secret appears to be invalid or corrupted"
          echo "   Please verify:"
          echo "   1. The key was exported correctly: gpg --armor --export-secret-keys <key-id>"
          echo "   2. If base64 encoded, it was encoded correctly: ... | base64 -w 0"
          cat /tmp/gpg_import.log
          exit 1
        fi
        
        # Get the key ID that was imported
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG 2>/dev/null | grep -A 1 "^sec" | tail -1 | awk '{print $1}')
        
        if [ -z "$GPG_KEY_ID" ]; then
          echo "‚ùå ERROR: No GPG key found after import"
          exit 1
        fi
        
        echo "‚úÖ GPG key imported successfully (Key ID: $GPG_KEY_ID)"
        
        # Test signing with the password
        echo "test" | gpg --batch --yes --passphrase "${{ secrets.SIGNING_PASSWORD }}" --pinentry-mode loopback --default-key "$GPG_KEY_ID" --clearsign > /dev/null 2>&1
        
        if [ $? -ne 0 ]; then
          echo "‚ùå ERROR: Failed to sign test data with SIGNING_PASSWORD"
          echo "   The SIGNING_PASSWORD secret appears to be incorrect"
          echo "   Please verify the password matches the one used when creating the GPG key"
          exit 1
        fi
        
        echo "‚úÖ GPG signing test successful with provided password"
        
        # Store the signing key content for later use
        echo "SIGNING_KEY_CONTENT<<EOF" >> "$GITHUB_ENV"
        echo "$SIGNING_KEY_CONTENT" >> "$GITHUB_ENV"
        echo "EOF" >> "$GITHUB_ENV"
        
    - name: Validate Maven Central credentials
      run: |
        echo "üîê Validating Maven Central credentials..."
        
        # Test authentication to Sonatype OSSRH (S01)
        RESPONSE=$(curl -s -w "\n%{http_code}" -u "${{ secrets.OSSRH_USERNAME }}:${{ secrets.OSSRH_PASSWORD }}" \
          "https://s01.oss.sonatype.org/service/local/authentication/login")
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        if [ "$HTTP_CODE" = "401" ]; then
          echo "‚ùå ERROR: Maven Central authentication failed (HTTP 401 Unauthorized)"
          echo "   Either OSSRH_USERNAME or OSSRH_PASSWORD is incorrect"
          echo "   Please verify:"
          echo "   1. You're using a User Token (not your login password)"
          echo "   2. Generate a token at: https://s01.oss.sonatype.org/#profile;User%20Token"
          echo "   3. The token hasn't been revoked or expired"
          echo ""
          echo "   Username provided: ${{ secrets.OSSRH_USERNAME }}"
          exit 1
        elif [ "$HTTP_CODE" = "403" ]; then
          echo "‚ùå ERROR: Maven Central authentication forbidden (HTTP 403)"
          echo "   The credentials may be valid but lack necessary permissions"
          echo "   Please verify your account has publishing rights for io.github.neuraquant"
          exit 1
        elif [ "$HTTP_CODE" != "200" ]; then
          echo "‚ö†Ô∏è  WARNING: Unexpected response from Maven Central (HTTP $HTTP_CODE)"
          echo "   Response: $BODY"
          echo "   Continuing anyway, but publish may fail..."
        else
          echo "‚úÖ Maven Central authentication successful"
        fi
        
    - name: Configure publishing environment
      run: |
        echo "üìã Setting up environment variables for publishing..."
        
        # Set environment variables
        {
          echo "ORG_GRADLE_PROJECT_signingInMemoryKey<<EOF"
          echo "$SIGNING_KEY_CONTENT"
          echo "EOF"
          echo "ORG_GRADLE_PROJECT_signingInMemoryKeyPassword=${{ secrets.SIGNING_PASSWORD }}"
          echo "ORG_GRADLE_PROJECT_mavenCentralUsername=${{ secrets.OSSRH_USERNAME }}"
          echo "ORG_GRADLE_PROJECT_mavenCentralPassword=${{ secrets.OSSRH_PASSWORD }}"
        } >> "$GITHUB_ENV"
        
        echo "‚úÖ Publishing environment configured successfully"
        
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        ./gradlew test --info
      
    - name: Publish to Maven Central
      run: |
        echo "üöÄ Starting Maven Central publishing process..."
        echo "üìã Available environment variables:"
        echo "  - ORG_GRADLE_PROJECT_mavenCentralUsername: ${ORG_GRADLE_PROJECT_mavenCentralUsername:+SET}"
        echo "  - ORG_GRADLE_PROJECT_mavenCentralPassword: ${ORG_GRADLE_PROJECT_mavenCentralPassword:+SET}"
        echo "  - ORG_GRADLE_PROJECT_signingInMemoryKey: ${ORG_GRADLE_PROJECT_signingInMemoryKey:+SET}"
        echo "  - ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${ORG_GRADLE_PROJECT_signingInMemoryKeyPassword:+SET}"
        
        echo "üîç Checking Gradle properties:"
        ./gradlew properties | grep -E "(mavenCentral|signing)" || echo "No mavenCentral or signing properties found"
        
        echo "üì¶ Publishing and releasing to Maven Central..."
        if ! ./gradlew publishAndReleaseToMavenCentral --no-configuration-cache --info --stacktrace 2>&1 | tee /tmp/publish.log; then
          echo ""
          echo "‚ùå Publishing failed! Analyzing error..."
          echo ""
          
          # Check for common credential-related errors
          if grep -q "401\|Unauthorized\|Authentication failed" /tmp/publish.log; then
            echo "üîç Detected authentication failure:"
            echo "   - Maven Central credentials (OSSRH_USERNAME/OSSRH_PASSWORD) may be incorrect"
            echo "   - Token may have expired or been revoked"
            echo "   - Verify credentials at: https://s01.oss.sonatype.org"
          elif grep -q "signing\|gpg\|PGP\|key" /tmp/publish.log | grep -i "fail\|error"; then
            echo "üîç Detected signing failure:"
            echo "   - GPG signing key (SIGNING_KEY) may be invalid"
            echo "   - GPG password (SIGNING_PASSWORD) may be incorrect"
            echo "   - Key may not match the password"
          elif grep -q "403\|Forbidden" /tmp/publish.log; then
            echo "üîç Detected authorization failure:"
            echo "   - Your account may lack permission to publish to io.github.neuraquant"
            echo "   - Verify namespace ownership at: https://s01.oss.sonatype.org"
          fi
          
          exit 1
        fi
        
        echo "‚úÖ Publishing completed successfully!"