name: Publish to Maven Central

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Verify Java version
      run: |
        echo "‚òï Java version:"
        java -version
        echo "üìã JAVA_HOME: $JAVA_HOME"
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Verify Gradle wrapper
      run: |
        echo "üîß Gradle wrapper info:"
        ./gradlew --version
        echo "üìÅ Gradle wrapper files:"
        ls -la gradle/wrapper/
        
    - name: Validate required secrets
      run: |
        echo "üîç Validating required secrets..."
        
        # Check SIGNING_KEY
        if [ -z "${{ secrets.SIGNING_KEY }}" ]; then
          echo "‚ùå ERROR: SIGNING_KEY secret is missing or empty"
          echo "   Please add the SIGNING_KEY secret to your repository settings"
          echo "   This should be your GPG private key in base64 format"
          exit 1
        else
          echo "‚úÖ SIGNING_KEY secret is present"
        fi
        
        # Check SIGNING_PASSWORD
        if [ -z "${{ secrets.SIGNING_PASSWORD }}" ]; then
          echo "‚ùå ERROR: SIGNING_PASSWORD secret is missing or empty"
          echo "   Please add the SIGNING_PASSWORD secret to your repository settings"
          echo "   This should be the password for your GPG private key"
          exit 1
        else
          echo "‚úÖ SIGNING_PASSWORD secret is present"
        fi
        
        # Check OSSRH_USERNAME
        if [ -z "${{ secrets.OSSRH_USERNAME }}" ]; then
          echo "‚ùå ERROR: OSSRH_USERNAME secret is missing or empty"
          echo "   Please add the OSSRH_USERNAME secret to your repository settings"
          echo "   This should be your Sonatype/OSSRH username"
          exit 1
        else
          echo "‚úÖ OSSRH_USERNAME secret is present"
        fi
        
        # Check OSSRH_PASSWORD
        if [ -z "${{ secrets.OSSRH_PASSWORD }}" ]; then
          echo "‚ùå ERROR: OSSRH_PASSWORD secret is missing or empty"
          echo "   Please add the OSSRH_PASSWORD secret to your repository settings"
          echo "   This should be your Sonatype/OSSRH password or token"
          exit 1
        else
          echo "‚úÖ OSSRH_PASSWORD secret is present"
        fi
        
        # Validate SIGNING_KEY format (check if it's base64 or raw GPG key)
        if echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > /dev/null 2>&1; then
          echo "‚úÖ SIGNING_KEY is base64 encoded"
        elif echo "${{ secrets.SIGNING_KEY }}" | grep -q "BEGIN PGP PRIVATE KEY BLOCK"; then
          echo "‚úÖ SIGNING_KEY is raw GPG key format"
        else
          echo "‚ùå ERROR: SIGNING_KEY format is invalid"
          echo "   The key should be either:"
          echo "   1. Base64 encoded GPG key"
          echo "   2. Raw GPG key starting with '-----BEGIN PGP PRIVATE KEY BLOCK-----'"
          echo "   For base64: gpg --armor --export-secret-keys <key-id> | base64 -w 0"
          echo "   For raw: gpg --armor --export-secret-keys <key-id>"
          exit 1
        fi
        
        echo "üéâ All secrets validation passed!"
        echo "üìã Secrets summary:"
        echo "  - SIGNING_KEY: ${#SIGNING_KEY} characters"
        echo "  - SIGNING_PASSWORD: ${#SIGNING_PASSWORD} characters"
        echo "  - OSSRH_USERNAME: ${#OSSRH_USERNAME} characters"
        echo "  - OSSRH_PASSWORD: ${#OSSRH_PASSWORD} characters"
        
    - name: Configure in-memory signing
      run: |
        # Check if key is base64 encoded or raw GPG key
        if echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > /dev/null 2>&1; then
          echo "üîì Decoding base64 encoded GPG key..."
          SIGNING_KEY_CONTENT=$(echo "${{ secrets.SIGNING_KEY }}" | base64 --decode)
        else
          echo "üìù Using raw GPG key format..."
          SIGNING_KEY_CONTENT="${{ secrets.SIGNING_KEY }}"
        fi
        
        # Set environment variables
        {
          echo "ORG_GRADLE_PROJECT_signingInMemoryKey<<EOF"
          echo "$SIGNING_KEY_CONTENT"
          echo "EOF"
          echo "ORG_GRADLE_PROJECT_signingInMemoryKeyPassword=${{ secrets.SIGNING_PASSWORD }}"
          echo "ORG_GRADLE_PROJECT_mavenCentralUsername=${{ secrets.OSSRH_USERNAME }}"
          echo "ORG_GRADLE_PROJECT_mavenCentralPassword=${{ secrets.OSSRH_PASSWORD }}"
        } >> "$GITHUB_ENV"
        
        echo "‚úÖ Environment variables configured successfully"
        
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        ./gradlew test --info
      
    - name: Publish and release to Maven Central
      run: |
        echo "üöÄ Starting Maven Central publishing process..."
        echo "üìã Available environment variables:"
        echo "  - ORG_GRADLE_PROJECT_mavenCentralUsername: ${ORG_GRADLE_PROJECT_mavenCentralUsername:+SET}"
        echo "  - ORG_GRADLE_PROJECT_mavenCentralPassword: ${ORG_GRADLE_PROJECT_mavenCentralPassword:+SET}"
        echo "  - ORG_GRADLE_PROJECT_signingInMemoryKey: ${ORG_GRADLE_PROJECT_signingInMemoryKey:+SET}"
        echo "  - ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${ORG_GRADLE_PROJECT_signingInMemoryKeyPassword:+SET}"
        
        echo "üîç Checking Gradle properties:"
        ./gradlew properties | grep -E "(mavenCentral|signing)" || echo "No mavenCentral or signing properties found"
        
        echo "üì¶ Publishing to Maven Central..."
        ./gradlew publishAllPublicationsToMavenCentralRepository --info --stacktrace
        
        echo "‚úÖ Publishing completed successfully!"